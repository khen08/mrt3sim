// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider             = "prisma-client-py"
  interface            = "sync" // Use synchronous interface for standard Flask
  recursive_type_depth = 5 // Default or adjust as needed
}

datasource db {
  provider = "mysql"
  // The URL should ideally be set via an environment variable
  // e.g., url = env("DATABASE_URL")
  // For now, using a placeholder typical for Docker Compose setups
  url      = env("DATABASE_URL") // Use the environment variable
}

model SIMULATIONS {
  SIMULATION_ID       Int      @id @default(autoincrement())
  NAME                String   @db.VarChar(255)
  CONFIG              Json     @db.Json // Contains all infrastructure data (stations, tracks, trains, specs)
  SERVICE_PERIODS     Json     @db.Json // Assumes appropriate JSON structure
  PASSENGER_DATA_FILE String?   @db.VarChar(255)
  TOTAL_RUN_TIME_SECONDS Float @default(0) // RUN TIME (overall execution time of simulation.run())
  CREATED_AT          DateTime @default(now())

  // Relations
  metrics         SIMULATION_METRICS[] // Relation to the new metrics table
  train_movements TRAIN_MOVEMENTS[]
  passenger_demand PASSENGER_DEMAND[]
}

model TRAIN_MOVEMENTS {
  MOVEMENT_ID                     Int       @id @default(autoincrement())
  SIMULATION_ID                   Int
  SCHEME_TYPE                     String    @db.VarChar(10) // REGULAR, SKIP-STOP
  TRAIN_ID                        Int
  TRAIN_SERVICE_TYPE              String    @db.VarChar(10) // A or B
  STATION_ID                      Int
  DIRECTION                       String    @db.VarChar(10)
  TRAIN_STATUS                    String    @db.VarChar(10) // IN_TRANSIT, TURNAROUND, WITHDRAWN
  ARRIVAL_TIME                    DateTime  @db.DateTime
  DEPARTURE_TIME                  DateTime  @db.DateTime 
  TRAVEL_TIME_SECONDS             Int       @default(0)
  PASSENGERS_BOARDED              Int       @default(0)
  PASSENGERS_ALIGHTED             Int       @default(0)
  CURRENT_STATION_PASSENGER_COUNT Int       @default(0)
  CURRENT_PASSENGER_COUNT         Int       @default(0)

  // Relation back to SIMULATIONS
  simulation SIMULATIONS @relation(fields: [SIMULATION_ID], references: [SIMULATION_ID], onDelete: Cascade)

  @@index([SIMULATION_ID, ARRIVAL_TIME], name: "IDX_TRAIN_MOVEMENTS_TIME")
}

model PASSENGER_DEMAND {
  SIMULATION_ID                 Int
  SCHEME_TYPE                   String      @db.VarChar(10) // REGULAR, SKIP-STOP
  ORIGIN_STATION_ID             Int
  DESTINATION_STATION_ID        Int
  ARRIVAL_TIME_AT_ORIGIN        DateTime    @db.DateTime // Time the demand group arrives at the origin
  DEPARTURE_TIME_FROM_ORIGIN    DateTime?   @db.DateTime // Time the demand group departs from the origin
  ARRIVAL_TIME_AT_TRANSFER      DateTime?   @db.DateTime // Time the demand group arrives at the transfer station
  DEPARTURE_TIME_FROM_TRANSFER  DateTime?   @db.DateTime // Time the demand group departs from the transfer station
  ARRIVAL_TIME_AT_DESTINATION   DateTime?   @db.DateTime // Time the demand group arrives at the destination
  WAIT_TIME                     Int         @default(0)
  TRAVEL_TIME                   Int         @default(0)
  TRIP_TYPE                     String      @db.VarChar(10) // DIRECT, TRANSFER - Represents the nature of the journey needed
  PASSENGER_COUNT               Int         @default(0)   // Number of passengers for this specific time and OD pair

  // Relation back to SIMULATIONS
  simulation SIMULATIONS @relation(fields: [SIMULATION_ID], references: [SIMULATION_ID], onDelete: Cascade)

  // Composite primary key based on identifying characteristics of demand
  @@id([SIMULATION_ID, SCHEME_TYPE, ARRIVAL_TIME_AT_ORIGIN, ORIGIN_STATION_ID, DESTINATION_STATION_ID])
  @@index([SIMULATION_ID, ORIGIN_STATION_ID], name: "IDX_PASSENGER_DEMAND_ORIGIN")
  @@index([SIMULATION_ID, DESTINATION_STATION_ID], name: "IDX_PASSENGER_DEMAND_DESTINATION")
  @@index([SIMULATION_ID, SCHEME_TYPE, ORIGIN_STATION_ID, DESTINATION_STATION_ID], name: "IDX_PASSENGER_DEMAND_OD_PAIR")
}

model SIMULATION_METRICS {
  METRIC_ID        Int      @id @default(autoincrement())
  SIMULATION_ID    Int      // Foreign key linking back to SIMULATIONS
  SCHEME_TYPE      String   @db.VarChar(10) // REGULAR, SKIP-STOP
  PASSENGER_COUNT  Int @default(0) // Number of passengers for this specific scheme that completed their journey

  // Aggregated results per scheme (in seconds)
  TOTAL_PASSENGER_TRAVEL_TIME_SECONDS Int @default(0)
  TOTAL_PASSENGER_WAITING_TIME_SECONDS Int @default(0)

  // Relation back to SIMULATIONS
  simulation       SIMULATIONS @relation(fields: [SIMULATION_ID], references: [SIMULATION_ID], onDelete: Cascade)

  // Ensure one metric set per simulation per scheme
  @@unique([SIMULATION_ID, SCHEME_TYPE])
}
